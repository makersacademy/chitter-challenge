#    _____               ____ ____        __     _         __
#   / ___/ _____ ____ _ / __// __/____   / /    (_)____   / /_
#   \__ \ / ___// __ `// /_ / /_ / __ \ / /    / // __ \ / __/
#  ___/ // /__ / /_/ // __// __// /_/ // /___ / // / / // /_
# /____/ \___/ \__,_//_/  /_/ 1 \____//_____//_//_/ /_/ \__/
#
# The linter file that doesn't lead junior developers to bad habits.
# https://github.com/makersacademy/scaffolint
#
# Problems (eg obselete names) may be due to an incompatible version.
# Check your Rubocop version with `rubocop -v` in the command line.
#
# Tested with Rubocop version 1.20
#
# Introduction
# ============
#
# Our order of priorities:
#
#   1. Conforming your code to the styleguide.
#   2. The styleguide being thorough and complete.
#
# This file relaxes Rubocop a bit so you can learn about code quality rather
# than just following the rules. Some guidelines can result in worse code if you
# don't know why they are there. For instance, if a line is too long, you might
# be tempted to simply abbreviate your variable names - making your code harder
# to read.
#
# We prioritize rules that offer good, easily incorporated feedback on improving
# your code, without being overwhelming or requiring experienced judgement.
#
# As you become a better developer you will remove or amend this file according
# to what you think good code should look like.
#
# Default Setup
# =============
#
# First, let's disable all rules. Then we can selectively re-enable the ones
# we want.

AllCops:
  DisabledByDefault: true
  SuggestExtensions:
    rubocop-rspec: false # Pending https://github.com/makersacademy/scaffolint/issues/7

# Metrics
# =======
#
# Sometimes beginner devs interpret line or block length restrictions as a
# reason to make things so abbreviated as to be unreadable. These messages are
# designed to make you write more readable code - not less.
#
# We want to encourage testing, but it can be verbose in the early stages.
# So we'll give you a break. As you learn, try removing the `Exclude` sections.

Layout/LineLength:
  Enabled: true
  Exclude:
    - '**/spec/**/*'
    - '**/test/**/*'
  Max: 100

Metrics/BlockLength:
  Enabled: true
  Exclude:
    - '**/spec/**/*'
    - '**/test/**/*'

Metrics/AbcSize:
  Enabled: true
  Exclude:
    - '**/spec/**/*'
    - '**/test/**/*'

Metrics/ClassLength:
  Enabled: true
  Exclude:
  - '**/spec/**/*'
  - '**/test/**/*'

Metrics/MethodLength:
  Enabled: true
  Exclude:
    - '**/spec/**/*'
    - '**/test/**/*'

Metrics/BlockNesting:
  Enabled: true
Metrics/CyclomaticComplexity:
  Enabled: true
Metrics/ModuleLength:
  Enabled: true
Metrics/ParameterLists:
  Enabled: true
Metrics/PerceivedComplexity:
  Enabled: true

# Security
# ========
#
# We'll enable all of these.

Security/Eval:
  Enabled: true
Security/JSONLoad:
  Enabled: true
Security/MarshalLoad:
  Enabled: true
Security/Open:
  Enabled: true
Security/YAMLLoad:
  Enabled: true

# Code Style
# ==========
#
# Many devs, upon running a linter for the first time, see a big wall of errors
# of dubious necessity and put it in the 'way too much trouble' box. Beginners
# usually have far more pressing concerns than which sort of quotes they use.
#
# This makes Rubocop have a bigger 'payoff' for beginners without so much of
# the punishment. We focus our linting on things that significantly impact
# readability, expressiveness, or teach a dev new things. For example:
#
#   * Indentation & whitespace (inconsistency, really gross stuff like `a=1`)
#   * Easy wins in expressiveness (e.g. guard clauses â€” nice opportunity to
#     inject concretes)
#   * Egregious non-idiomatic ruby like `def getFilename`

Bundler/DuplicatedGem:
  Enabled: true
Bundler/InsecureProtocolSource:
  Enabled: true

Layout/BlockAlignment:
  Enabled: true
Layout/BlockEndNewline:
  Enabled: true
Layout/ConditionPosition:
  Enabled: true
Layout/DefEndAlignment:
  Enabled: true
Layout/EndAlignment:
  Enabled: true
Layout/DotPosition:
  Enabled: true
Layout/ElseAlignment:
  Enabled: true
Layout/EmptyLineBetweenDefs:
  Enabled: true
Layout/EmptyLines:
  Enabled: true
Layout/EmptyLinesAroundAccessModifier:
  Enabled: true
Layout/EndOfLine:
  Enabled: true
Layout/ExtraSpacing:
  Enabled: true
Layout/IndentationConsistency:
  Enabled: true
Layout/IndentationWidth:
  Enabled: true
Layout/InitialIndentation:
  Enabled: true
Layout/LeadingCommentSpace:
  Enabled: true
Layout/SpaceAfterColon:
  Enabled: true
Layout/SpaceAfterMethodName:
  Enabled: true
Layout/SpaceAfterNot:
  Enabled: true
Layout/SpaceAfterSemicolon:
  Enabled: true
Layout/SpaceAroundBlockParameters:
  Enabled: true
Layout/SpaceAroundEqualsInParameterDefault:
  Enabled: true
Layout/SpaceAroundMethodCallOperator:
  Enabled: true
Layout/SpaceAroundKeyword:
  Enabled: true
Layout/SpaceAroundOperators:
  Enabled: true
Layout/SpaceBeforeBlockBraces:
  Enabled: true
Layout/SpaceBeforeBrackets:
  Enabled: true
Layout/SpaceBeforeComma:
  Enabled: true
Layout/SpaceBeforeComment:
  Enabled: true
Layout/SpaceBeforeFirstArg:
  Enabled: true
Layout/SpaceBeforeSemicolon:
  Enabled: true
Layout/SpaceInLambdaLiteral:
  Enabled: true
Layout/SpaceInsideArrayPercentLiteral:
  Enabled: true
Layout/SpaceInsideBlockBraces:
  Enabled: true
Layout/SpaceInsideReferenceBrackets:
  Enabled: true
Layout/SpaceInsideArrayLiteralBrackets:
  Enabled: true
Layout/SpaceInsideHashLiteralBraces:
  Enabled: true
Layout/SpaceInsideParens:
  Enabled: true
Layout/SpaceInsidePercentLiteralDelimiters:
  Enabled: true
Layout/SpaceInsideRangeLiteral:
  Enabled: true
Layout/SpaceInsideStringInterpolation:
  Enabled: true
Layout/TrailingEmptyLines:
  Enabled: true
Layout/FirstHashElementIndentation:
  Enabled: true
  EnforcedStyle: consistent
  Exclude: # To handle cases in `let` blocks in tests
  - '**/spec/**/*'
  - '**/test/**/*'
Layout/FirstArrayElementIndentation:
  Enabled: true
  EnforcedStyle: consistent
  Exclude: # To handle cases in `let` blocks in tests
  - '**/spec/**/*'
  - '**/test/**/*'

Lint/AmbiguousAssignment:
  Enabled: true
Lint/AssignmentInCondition:
  Enabled: true
Lint/BinaryOperatorWithIdenticalOperands:
  Enabled: true
Lint/CircularArgumentReference:
  Enabled: true
Lint/ConstantDefinitionInBlock:
  Enabled: true
Lint/DeprecatedClassMethods:
  Enabled: true
Lint/DeprecatedConstants:
  Enabled: true
Lint/DisjunctiveAssignmentInConstructor:
  Enabled: true
Lint/DuplicateElsifCondition:
  Enabled: true
Lint/DuplicateHashKey:
  Enabled: true
Lint/DuplicateMethods:
  Enabled: true
Lint/DuplicateRequire:
  Enabled: true
Lint/ElseLayout:
  Enabled: true
Lint/FloatComparison:
  Enabled: true
Lint/FloatOutOfRange:
  Enabled: true
Lint/IneffectiveAccessModifier:
  Enabled: true
Lint/InterpolationCheck:
  Enabled: true
Lint/LiteralAsCondition:
  Enabled: true
Lint/LiteralInInterpolation:
  Enabled: true
Lint/MissingCopEnableDirective:
  Enabled: true
Lint/MultipleComparison:
  Enabled: true
Lint/NestedMethodDefinition:
  Enabled: true
Lint/OrAssignmentToConstant:
  Enabled: true
Lint/RandOne:
  Enabled: true
Lint/RedundantStringCoercion:
  Enabled: true
Lint/RedundantWithIndex:
  Enabled: true
Lint/RequireParentheses:
  Enabled: true
Lint/ReturnInVoidContext:
  Enabled: true
Lint/SelfAssignment:
  Enabled: true
Lint/SymbolConversion:
  Enabled: true
Lint/Syntax:
  Enabled: true
Lint/TopLevelReturnWithArgument:
  Enabled: true
Lint/TrailingCommaInAttributeDeclaration:
  Enabled: true
Lint/TripleQuotes:
  Enabled: true
Lint/UnderscorePrefixedVariableName:
  Enabled: true
Lint/UnreachableCode:
  Enabled: true
Lint/UnreachableLoop:
  Enabled: true
Lint/UnusedBlockArgument:
  Enabled: true
Lint/UnusedMethodArgument:
  Enabled: true
Lint/UselessAccessModifier:
  Enabled: true
Lint/Void:
  Enabled: true

Naming/AccessorMethodName:
  Enabled: true
Naming/AsciiIdentifiers:
  Enabled: true
Naming/BinaryOperatorParameterName:
  Enabled: true
Naming/ClassAndModuleCamelCase:
  Enabled: true
Naming/ConstantName:
  Enabled: true
Naming/FileName:
  Enabled: true
Naming/InclusiveLanguage:
  Enabled: true
Naming/MethodName:
  Enabled: true
Naming/PredicateName:
  Enabled: true
Naming/VariableName:
  Enabled: true
Naming/VariableNumber:
  Enabled: true

Style/CollectionCompact:
  Enabled: true
Style/EvenOdd:
  Enabled: true
Style/GuardClause:
  Enabled: true
Style/HashEachMethods:
  Enabled: true
Style/HashExcept:
  Enabled: true
Style/IfInsideElse:
  Enabled: true
  AllowIfModifier: true
Style/IfWithBooleanLiteralBranches:
  Enabled: true
Style/InverseMethods:
  Enabled: true
Style/KeywordParametersOrder:
  Enabled: true
Style/MethodDefParentheses:
  Enabled: true
Style/MinMax:
  Enabled: true
Style/MultilineIfThen:
  Enabled: true
Style/MutableConstant:
  Enabled: true
Style/NegatedIf:
  Enabled: true
Style/NegatedIfElseCondition:
  Enabled: true
Style/NegatedUnless:
  Enabled: true
Style/NegatedWhile:
  Enabled: true
Style/NestedModifier:
  Enabled: true
Style/NestedTernaryOperator:
  Enabled: true
Style/NilComparison:
  Enabled: true
Style/NumericLiteralPrefix:
  Enabled: true
Style/Not:
  Enabled: true
Style/NumericLiterals:
  Enabled: true
Style/NumericPredicate:
  Enabled: true
Style/OneLineConditional:
  Enabled: true
Style/OptionHash:
  Enabled: true
Style/OptionalArguments:
  Enabled: true
Style/OrAssignment:
  Enabled: true
Style/RandomWithOffset:
  Enabled: true
Style/RedundantArgument:
  Enabled: true
Style/RedundantAssignment:
  Enabled: true
Style/RedundantCondition:
  Enabled: true
Style/RedundantConditional:
  Enabled: true
Style/RedundantFileExtensionInRequire:
  Enabled: true
Style/RedundantFreeze:
  Enabled: true
Style/RedundantInterpolation:
  Enabled: true
Style/RedundantParentheses:
  Enabled: true
Style/RedundantSelf:
  Enabled: true
Style/RedundantSelfAssignment:
  Enabled: true
Style/RedundantSelfAssignmentBranch:
  Enabled: true
Style/RedundantSort:
  Enabled: true
Style/RedundantSortBy:
  Enabled: true
Style/SafeNavigation:
  Enabled: true
Style/Sample:
  Enabled: true
Style/Send: # Devs often use `#send` to call private methods - not good!
  Enabled: true
Style/SlicingWithRange:
  Enabled: true
Style/SoleNestedConditional:
  Enabled: true
Style/StringChars:
  Enabled: true
Style/TrailingMethodEndStatement:
  Enabled: true
Style/TrailingBodyOnMethodDefinition:
  Enabled: true
Style/TrailingBodyOnClass:
  Enabled: true
Style/TrivialAccessors:
  Enabled: true
Style/UnlessElse:
  Enabled: true
Style/VariableInterpolation:
  Enabled: true
Style/YodaCondition:
  Enabled: true
Style/ZeroLengthPredicate:
  Enabled: true
Style/DefWithParentheses:
  Enabled: true
Style/IdenticalConditionalBranches:
  Enabled: true
Style/SelfAssignment:
  Enabled: true
Style/SymbolLiteral:
  Enabled: true
Style/BlockDelimiters:
  Enabled: true
  Exclude: # `let` blocks are commonly multiline in tests
    - '**/spec/**/*'
    - '**/test/**/*'
