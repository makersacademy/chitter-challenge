Two Tables Design Recipe Template
Copy this recipe template to design and create two related database tables from a specification.

1. Extract nouns from the user stories or specification
# EXAMPLE USER STORY:
# (analyse only the relevant part - here the final line).
```
STRAIGHT UP

As a Maker
So that I can let people know what I am doing  
I want to post a message (peep) to chitter

As a maker
So that I can see what others are saying  
I want to see all peeps in reverse chronological order

As a Maker
So that I can better appreciate the context of a peep
I want to see the time at which it was made

As a Maker
So that I can post messages on Chitter as me
I want to sign up for Chitter

```

Nouns:

post, peeps, time_created, sign_up

2. Infer the Table Name and Columns
Put the different nouns in this table. Replace the example with your own nouns.

|     Record    |   Properties           |
|---------------|------------------------|
|     posts     |   message, time_created   |
|     users     |   name, username, email_address, password|


Name of the first table (always plural): posts

Column names: message, time_created 

Name of the second table (always plural): users

Column names: name, username, email_address, password

3. Decide the column types.
Here's a full documentation of PostgreSQL data types.

Most of the time, you'll need either text, int, bigint, numeric, or boolean. If you're in doubt, do some research or ask your peers.

Remember to always have the primary key id as a first column. Its type will always be SERIAL.

# EXAMPLE:

Table: posts
id SERIAL
peep text
time_created timestamp

Table: users
id SERIAL
name text
username unique not null
email_address unique not null
password unique not null

4. Decide on The Tables Relationship
Most of the time, you'll be using a one-to-many relationship, and will need a foreign key on one of the two tables.

To decide on which one, answer these two questions:

Can one post have many users? (No)
Can one user have many posts? (Yes)
You'll then be able to say that:

A [user] has many [posts]
And on the other side, [post] belongs to [user]
In that case, the foreign key is in the table [post]
Replace the relevant bits in this example with your own:

post -> many to one -> user

The FOREIGN KEY is on posts (account_id)


4. Write the SQL.
-- Replace the table name, columm names and types.

-- Create the table without the foreign key first.
CREATE TABLE users (
  id SERIAL PRIMARY KEY,
  name text,
  user_name unique not null,
  email_address unique not null,
  password unique not null
);

-- Then the table with the foreign key first.
CREATE TABLE posts (
  id SERIAL PRIMARY KEY,
  message text,
  time_created timestamp,
-- The foreign key name is always {other_table_singular}_id
  user_id int,
  constraint fk_account foreign key(user_id)
    references users(id)
    on delete cascade
);
5. Create the tables.
psql -h 127.0.0.1 database_name < [file_name].sql
